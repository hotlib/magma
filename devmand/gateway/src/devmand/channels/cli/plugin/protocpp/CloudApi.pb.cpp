// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CloudApi.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#ifdef INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#endif
#include "CloudApi.pb.h"

#include <algorithm>

#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace devmand {
namespace channels {
namespace cli {
namespace plugin {

namespace {

const ::google::protobuf::Descriptor* DataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    DataRequest_reflection_ = NULL;

} // namespace

void protobuf_AssignDesc_CloudApi_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_CloudApi_2eproto() {
  protobuf_AddDesc_CloudApi_2eproto();
  const ::google::protobuf::FileDescriptor* file =
      ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
          "CloudApi.proto");
  GOOGLE_CHECK(file != NULL);
  DataRequest_descriptor_ = file->message_type(0);
  static const int DataRequest_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRequest, devicename_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRequest, devicedata_),
  };
  DataRequest_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          DataRequest_descriptor_,
          DataRequest::default_instance_,
          DataRequest_offsets_,
          -1,
          -1,
          -1,
          sizeof(DataRequest),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              DataRequest, _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              DataRequest, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(
      &protobuf_AssignDescriptors_once_, &protobuf_AssignDesc_CloudApi_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DataRequest_descriptor_, &DataRequest::default_instance());
}

} // namespace

void protobuf_ShutdownFile_CloudApi_2eproto() {
  delete DataRequest::default_instance_;
  delete DataRequest_reflection_;
}

void protobuf_AddDesc_CloudApi_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_CloudApi_2eproto() {
  static bool already_here = false;
  if (already_here)
    return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fempty_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      "\n\016CloudApi.proto\022\033devmand.channels.cli.p"
      "lugin\032\033google/protobuf/empty.proto\"5\n\013Da"
      "taRequest\022\022\n\ndeviceName\030\001 \001(\t\022\022\n\ndeviceD"
      "ata\030\002 \001(\t2^\n\014DataReceiver\022N\n\010sendData\022(."
      "devmand.channels.cli.plugin.DataRequest\032"
      "\026.google.protobuf.Empty\"\000b\006proto3",
      233);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
      "CloudApi.proto", &protobuf_RegisterTypes);
  DataRequest::default_instance_ = new DataRequest();
  DataRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(
      &protobuf_ShutdownFile_CloudApi_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CloudApi_2eproto {
  StaticDescriptorInitializer_CloudApi_2eproto() {
    protobuf_AddDesc_CloudApi_2eproto();
  }
} static_descriptor_initializer_CloudApi_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataRequest::kDeviceNameFieldNumber;
const int DataRequest::kDeviceDataFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DataRequest::DataRequest()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:devmand.channels.cli.plugin.DataRequest)
}

void DataRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DataRequest::DataRequest(const DataRequest& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:devmand.channels.cli.plugin.DataRequest)
}

void DataRequest::SharedCtor() {
  _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devicename_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicedata_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DataRequest::~DataRequest() {
  // @@protoc_insertion_point(destructor:devmand.channels.cli.plugin.DataRequest)
  SharedDtor();
}

void DataRequest::SharedDtor() {
  devicename_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicedata_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataRequest_descriptor_;
}

const DataRequest& DataRequest::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_CloudApi_2eproto();
  return *default_instance_;
}

DataRequest* DataRequest::default_instance_ = NULL;

DataRequest* DataRequest::New(::google::protobuf::Arena* arena) const {
  DataRequest* n = new DataRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataRequest::Clear() {
  // @@protoc_insertion_point(message_clear_start:devmand.channels.cli.plugin.DataRequest)
  devicename_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicedata_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:devmand.channels.cli.plugin.DataRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string deviceName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_devicename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->devicename().data(),
(int)              this->devicename().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "devmand.channels.cli.plugin.DataRequest.deviceName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18))
          goto parse_deviceData;
        break;
      }

      // optional string deviceData = 2;
      case 2: {
        if (tag == 18) {
        parse_deviceData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_devicedata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->devicedata().data(),
(int)              this->devicedata().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "devmand.channels.cli.plugin.DataRequest.deviceData"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:devmand.channels.cli.plugin.DataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:devmand.channels.cli.plugin.DataRequest)
  return false;
#undef DO_
}

void DataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  (void)output;
  // @@protoc_insertion_point(serialize_start:devmand.channels.cli.plugin.DataRequest)
  // optional string deviceName = 1;
  if (this->devicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->devicename().data(),
(int)        this->devicename().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.DataRequest.deviceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        1, this->devicename(), output);
  }

  // optional string deviceData = 2;
  if (this->devicedata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->devicedata().data(),
(int)        this->devicedata().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.DataRequest.deviceData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        2, this->devicedata(), output);
  }

  // @@protoc_insertion_point(serialize_end:devmand.channels.cli.plugin.DataRequest)
}

::google::protobuf::uint8* DataRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic,
    ::google::protobuf::uint8* target) const {
  (void)deterministic;
  // @@protoc_insertion_point(serialize_to_array_start:devmand.channels.cli.plugin.DataRequest)
  // optional string deviceName = 1;
  if (this->devicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->devicename().data(),
(int)        this->devicename().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.DataRequest.deviceName");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devicename(), target);
  }

  // optional string deviceData = 2;
  if (this->devicedata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->devicedata().data(),
(int)        this->devicedata().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.DataRequest.deviceData");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->devicedata(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:devmand.channels.cli.plugin.DataRequest)
  return target;
}

int DataRequest::ByteSize() const {
  // @@protoc_insertion_point(message_byte_size_start:devmand.channels.cli.plugin.DataRequest)
  int total_size = 0;

  // optional string deviceName = 1;
  if (this->devicename().size() > 0) {
    total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
                      this->devicename());
  }

  // optional string deviceData = 2;
  if (this->devicedata().size() > 0) {
    total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
                      this->devicedata());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:devmand.channels.cli.plugin.DataRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DataRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataRequest>(
          &from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:devmand.channels.cli.plugin.DataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:devmand.channels.cli.plugin.DataRequest)
    MergeFrom(*source);
  }
}

void DataRequest::MergeFrom(const DataRequest& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:devmand.channels.cli.plugin.DataRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.devicename().size() > 0) {
    devicename_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.devicename_);
  }
  if (from.devicedata().size() > 0) {
    devicedata_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.devicedata_);
  }
}

void DataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:devmand.channels.cli.plugin.DataRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void DataRequest::CopyFrom(const DataRequest& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:devmand.channels.cli.plugin.DataRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool DataRequest::IsInitialized() const {
  return true;
}

void DataRequest::Swap(DataRequest* other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void DataRequest::InternalSwap(DataRequest* other) {
  devicename_.Swap(&other->devicename_);
  devicedata_.Swap(&other->devicedata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataRequest_descriptor_;
  metadata.reflection = DataRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataRequest

// optional string deviceName = 1;
void DataRequest::clear_devicename() {
  devicename_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DataRequest::devicename() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.DataRequest.deviceName)
  return devicename_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataRequest::set_devicename(const ::std::string& value) {
  devicename_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.DataRequest.deviceName)
}
void DataRequest::set_devicename(const char* value) {
  devicename_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.DataRequest.deviceName)
}
void DataRequest::set_devicename(const char* value, size_t size) {
  devicename_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.DataRequest.deviceName)
}
::std::string* DataRequest::mutable_devicename() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.DataRequest.deviceName)
  return devicename_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataRequest::release_devicename() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.DataRequest.deviceName)

  return devicename_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataRequest::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
  } else {
  }
  devicename_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.DataRequest.deviceName)
}

// optional string deviceData = 2;
void DataRequest::clear_devicedata() {
  devicedata_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DataRequest::devicedata() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.DataRequest.deviceData)
  return devicedata_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataRequest::set_devicedata(const ::std::string& value) {
  devicedata_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.DataRequest.deviceData)
}
void DataRequest::set_devicedata(const char* value) {
  devicedata_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.DataRequest.deviceData)
}
void DataRequest::set_devicedata(const char* value, size_t size) {
  devicedata_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.DataRequest.deviceData)
}
::std::string* DataRequest::mutable_devicedata() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.DataRequest.deviceData)
  return devicedata_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataRequest::release_devicedata() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.DataRequest.deviceData)

  return devicedata_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataRequest::set_allocated_devicedata(::std::string* devicedata) {
  if (devicedata != NULL) {
  } else {
  }
  devicedata_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicedata);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.DataRequest.deviceData)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace plugin
} // namespace cli
} // namespace channels
} // namespace devmand

// @@protoc_insertion_point(global_scope)

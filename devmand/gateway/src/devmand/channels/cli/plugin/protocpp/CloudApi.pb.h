// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CloudApi.proto

#ifndef PROTOBUF_CloudApi_2eproto__INCLUDED
#define PROTOBUF_CloudApi_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace devmand {
namespace channels {
namespace cli {
namespace plugin {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_CloudApi_2eproto();
void protobuf_AssignDesc_CloudApi_2eproto();
void protobuf_ShutdownFile_CloudApi_2eproto();

class DataRequest;

// ===================================================================

class DataRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:devmand.channels.cli.plugin.DataRequest)
                                                        */
{
 public:
  DataRequest();
  virtual ~DataRequest();

  DataRequest(const DataRequest& from);

  inline DataRequest& operator=(const DataRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataRequest& default_instance();

  void Swap(DataRequest* other);

  // implements Message ----------------------------------------------

  inline DataRequest* New() const {
    return New(NULL);
  }

  DataRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataRequest& from);
  void MergeFrom(const DataRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic,
      ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const {
    return _cached_size_;
  }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DataRequest* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string deviceName = 1;
  void clear_devicename();
  static const int kDeviceNameFieldNumber = 1;
  const ::std::string& devicename() const;
  void set_devicename(const ::std::string& value);
  void set_devicename(const char* value);
  void set_devicename(const char* value, size_t size);
  ::std::string* mutable_devicename();
  ::std::string* release_devicename();
  void set_allocated_devicename(::std::string* devicename);

  // optional string deviceData = 2;
  void clear_devicedata();
  static const int kDeviceDataFieldNumber = 2;
  const ::std::string& devicedata() const;
  void set_devicedata(const ::std::string& value);
  void set_devicedata(const char* value);
  void set_devicedata(const char* value, size_t size);
  ::std::string* mutable_devicedata();
  ::std::string* release_devicedata();
  void set_allocated_devicedata(::std::string* devicedata);

  // @@protoc_insertion_point(class_scope:devmand.channels.cli.plugin.DataRequest)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr devicename_;
  ::google::protobuf::internal::ArenaStringPtr devicedata_;
  mutable int _cached_size_;
  friend void protobuf_AddDesc_CloudApi_2eproto();
  friend void protobuf_AssignDesc_CloudApi_2eproto();
  friend void protobuf_ShutdownFile_CloudApi_2eproto();

  void InitAsDefaultInstance();
  static DataRequest* default_instance_;
};
// ===================================================================

// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DataRequest

// optional string deviceName = 1;
inline void DataRequest::clear_devicename() {
  devicename_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataRequest::devicename() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.DataRequest.deviceName)
  return devicename_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataRequest::set_devicename(const ::std::string& value) {
  devicename_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.DataRequest.deviceName)
}
inline void DataRequest::set_devicename(const char* value) {
  devicename_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.DataRequest.deviceName)
}
inline void DataRequest::set_devicename(const char* value, size_t size) {
  devicename_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.DataRequest.deviceName)
}
inline ::std::string* DataRequest::mutable_devicename() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.DataRequest.deviceName)
  return devicename_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataRequest::release_devicename() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.DataRequest.deviceName)

  return devicename_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataRequest::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
  } else {
  }
  devicename_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.DataRequest.deviceName)
}

// optional string deviceData = 2;
inline void DataRequest::clear_devicedata() {
  devicedata_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataRequest::devicedata() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.DataRequest.deviceData)
  return devicedata_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataRequest::set_devicedata(const ::std::string& value) {
  devicedata_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.DataRequest.deviceData)
}
inline void DataRequest::set_devicedata(const char* value) {
  devicedata_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.DataRequest.deviceData)
}
inline void DataRequest::set_devicedata(const char* value, size_t size) {
  devicedata_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.DataRequest.deviceData)
}
inline ::std::string* DataRequest::mutable_devicedata() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.DataRequest.deviceData)
  return devicedata_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataRequest::release_devicedata() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.DataRequest.deviceData)

  return devicedata_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataRequest::set_allocated_devicedata(::std::string* devicedata) {
  if (devicedata != NULL) {
  } else {
  }
  devicedata_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicedata);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.DataRequest.deviceData)
}

#endif // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace plugin
} // namespace cli
} // namespace channels
} // namespace devmand

// @@protoc_insertion_point(global_scope)

#endif // PROTOBUF_CloudApi_2eproto__INCLUDED
